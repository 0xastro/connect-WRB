// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

syntax = "proto3";

import "orc8r/protos/common.proto";
import "google/protobuf/timestamp.proto";

package magma.lte;

option go_package = "magma/lte/cloud/go/protos";

// --------------------------------------------------------------------------
// Metering flow records
//
// A record is a statistics constainer that is constructed by the metering
// application on the gateway for each subscriber flow that is matched. Each
// flow is noted with a unique idenitifier that associates it with a
// FlowRecord instance and allows us to update statistics. This strucutre is
// periodically synchronized to the cloud for bookkeeping where it is tagged
// with the originating gateway logical id and a timestamp.
//
// A table is a collection of records and is used to transport them in bulk.
// --------------------------------------------------------------------------

message FlowRecord {
  message ID {
    string id = 1;
  }
  ID id = 1;
  string sid = 2;
  string gateway_id = 3;
  uint64 bytes_tx = 5;
  uint64 bytes_rx = 6;
  uint64 pkts_tx = 7;
  uint64 pkts_rx = 8;
  google.protobuf.Timestamp start_time = 9;
}

message FlowRecordSet {
  repeated string record_ids = 1;
}

message FlowTable {
  repeated FlowRecord flows = 1;
}

// --------------------------------------------------------------------------
// Cloud controller for MeteringD
//
// The MeteringdRecordsController is an RPC service used by the gateway to 
// upstream records, and thus requires a Gateway context for that operation.
// It also serves as the read interface for obsidian or other cloud services to
// read records and expects a Network context for such operations.
//
// There is also the record query wrappers that pass the network context
// for cloud orinated requests.
// --------------------------------------------------------------------------
message FlowRecordQuery {
  string network_id = 1;
  oneof query {
    string record_id = 2;
    string gateway_id = 3;
    string subscriber_id = 4;
  }
}

service MeteringdRecordsController {

  // Get a flow record
  rpc GetRecord(FlowRecordQuery) returns (FlowRecord) {}

  // Get all flow records for a subscriber
  rpc ListSubscriberRecords(FlowRecordQuery) returns (FlowTable) {}

  // Update record of flows from gateway (has identity context)
  rpc UpdateFlows(FlowTable) returns (magma.orc8r.Void) {}
}
